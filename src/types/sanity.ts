/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  url?: string;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  subtitle?: string;
  description?: string;
  year?: number;
  skills?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "skill";
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  secondaryImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  quote?: Quote;
  slug?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Quote = {
  _type: "quote";
  text?: string;
  author?: {
    name?: string;
    role?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Skill = {
  _id: string;
  _type: "skill";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  category?: "design" | "development" | "animation";
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Project | Slug | Quote | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Skill;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/queries.ts
// Variable: PROJECTS_QUERY
// Query: *[_type == "project" && defined(slug.current)][0...12] {  _id,  name,  url,  "thumbnail": thumbnail.asset->url,  subtitle,  description,  year,  "slug": slug.current,  "skills": skills[]-> {    _id,    name,    category  },  "mainImage": mainImage.asset->url,  "secondaryImage": secondaryImage.asset->url,  "images": images[].asset->url,  quote {    text,    author {      name,      role,      "image": image.asset->url    }  }}
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  url: string | null;
  thumbnail: string | null;
  subtitle: string | null;
  description: string | null;
  year: number | null;
  slug: string | null;
  skills: Array<{
    _id: string;
    name: string | null;
    category: "animation" | "design" | "development" | null;
  }> | null;
  mainImage: string | null;
  secondaryImage: string | null;
  images: Array<string | null> | null;
  quote: {
    text: string | null;
    author: {
      name: string | null;
      role: string | null;
      image: string | null;
    } | null;
  } | null;
}>;
// Variable: PROJECT_QUERY
// Query: *[_type == "project" && slug.current == $slug][0] {  _id,  name,  url,  "thumbnail": thumbnail.asset->url,  subtitle,  description,  year,  "slug": slug.current,  "skills": skills[]-> {    _id,    name,    category  },  "mainImage": mainImage.asset->url,  "secondaryImage": secondaryImage.asset->url,  "images": images[].asset->url,  quote {    text,    author {      name,      role,      "image": image.asset->url    }  }}
export type PROJECT_QUERYResult = {
  _id: string;
  name: string | null;
  url: string | null;
  thumbnail: string | null;
  subtitle: string | null;
  description: string | null;
  year: number | null;
  slug: string | null;
  skills: Array<{
    _id: string;
    name: string | null;
    category: "animation" | "design" | "development" | null;
  }> | null;
  mainImage: string | null;
  secondaryImage: string | null;
  images: Array<string | null> | null;
  quote: {
    text: string | null;
    author: {
      name: string | null;
      role: string | null;
      image: string | null;
    } | null;
  } | null;
} | null;
// Variable: SKILLS_QUERY
// Query: *[_type == "skill"] | order(name asc) {  _id,  name,  category}
export type SKILLS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  category: "animation" | "design" | "development" | null;
}>;
// Variable: SKILLS_BY_CATEGORY_QUERY
// Query: *[_type == "skill" && category == $category] | order(name asc) {  _id,  name,  category}
export type SKILLS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  name: string | null;
  category: "animation" | "design" | "development" | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"project\" && defined(slug.current)][0...12] {\n  _id,\n  name,\n  url,\n  \"thumbnail\": thumbnail.asset->url,\n  subtitle,\n  description,\n  year,\n  \"slug\": slug.current,\n  \"skills\": skills[]-> {\n    _id,\n    name,\n    category\n  },\n  \"mainImage\": mainImage.asset->url,\n  \"secondaryImage\": secondaryImage.asset->url,\n  \"images\": images[].asset->url,\n  quote {\n    text,\n    author {\n      name,\n      role,\n      \"image\": image.asset->url\n    }\n  }\n}": PROJECTS_QUERYResult;
    "*[_type == \"project\" && slug.current == $slug][0] {\n  _id,\n  name,\n  url,\n  \"thumbnail\": thumbnail.asset->url,\n  subtitle,\n  description,\n  year,\n  \"slug\": slug.current,\n  \"skills\": skills[]-> {\n    _id,\n    name,\n    category\n  },\n  \"mainImage\": mainImage.asset->url,\n  \"secondaryImage\": secondaryImage.asset->url,\n  \"images\": images[].asset->url,\n  quote {\n    text,\n    author {\n      name,\n      role,\n      \"image\": image.asset->url\n    }\n  }\n}": PROJECT_QUERYResult;
    "*[_type == \"skill\"] | order(name asc) {\n  _id,\n  name,\n  category\n}": SKILLS_QUERYResult;
    "*[_type == \"skill\" && category == $category] | order(name asc) {\n  _id,\n  name,\n  category\n}": SKILLS_BY_CATEGORY_QUERYResult;
  }
}
